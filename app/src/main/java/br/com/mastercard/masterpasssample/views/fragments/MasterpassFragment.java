package br.com.mastercard.masterpasssample.views.fragments;

import android.content.Intent;
import android.graphics.drawable.PictureDrawable;
import android.net.Uri;
import android.support.customtabs.CustomTabsClient;
import android.support.customtabs.CustomTabsIntent;
import android.support.customtabs.CustomTabsServiceConnection;
import android.support.customtabs.CustomTabsSession;
import android.text.TextUtils;
import android.widget.ImageView;

import com.bumptech.glide.GenericRequestBuilder;
import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.load.model.StreamEncoder;
import com.bumptech.glide.load.resource.file.FileToStreamDecoder;
import com.caverock.androidsvg.SVG;

import java.io.InputStream;

import br.com.mastercard.masterpasssample.Constants;
import br.com.mastercard.masterpasssample.R;
import br.com.mastercard.masterpasssample.masterpass.ServiceConnection;
import br.com.mastercard.masterpasssample.utils.CustomTabsHelper;
import br.com.mastercard.masterpasssample.utils.SvgDecoder;
import br.com.mastercard.masterpasssample.utils.SvgDrawableTranscoder;
import br.com.mastercard.masterpasssample.utils.SvgSoftwareLayerSetter;
import br.com.mastercard.masterpasssample.masterpass.ServiceConnectionCallback;
import butterknife.BindView;
import butterknife.OnClick;
import timber.log.Timber;

/**
 * Mastercard - Masterpass example - app2web - v7 - 2017-09-13
 */

public class MasterpassFragment extends AbstractFragment implements ServiceConnectionCallback {

    @BindView(R.id.imageview_masterpass)
    ImageView mIvMasterpass;

    private CustomTabsSession mCustomTabsSession;
    private CustomTabsClient mClient;
    private CustomTabsServiceConnection mConnection;
    private String mPackageNameToBind;

    private GenericRequestBuilder<Uri, InputStream, SVG, PictureDrawable> requestBuilder;

    @Override
    int getFragmentLayout() {
        return R.layout.fragment_masterpass;
    }

    @Override
    public void onStart() {
        super.onStart();
        bindCustomTabsService();
        initializeMasterpassButton();
    }

    @Override
    public void onStop() {
        super.onStop();
        unbindCustomTabsService();
    }

    private void initializeMasterpassButton() {
        createMasterpassImageRequestBuilder();
        Uri uri = Uri.parse(Constants.MASTERPASS_BUTTONIMAGE_URL);

        requestBuilder
                .diskCacheStrategy(DiskCacheStrategy.SOURCE)
                .load(uri)
                .into(mIvMasterpass);
    }

    /**
     * This method create a {@link GenericRequestBuilder} to initialize the masterpass button
     * with an SVG image
     */
    private void createMasterpassImageRequestBuilder() {
        requestBuilder = Glide.with(getActivity())
                .using(Glide.buildStreamModelLoader(Uri.class, getActivity()), InputStream.class)
                .from(Uri.class)
                .as(SVG.class)
                .transcode(new SvgDrawableTranscoder(), PictureDrawable.class)
                .sourceEncoder(new StreamEncoder())
                .cacheDecoder(new FileToStreamDecoder<>(new SvgDecoder()))
                .decoder(new SvgDecoder())
                .animate(android.R.anim.fade_in)
                .listener(new SvgSoftwareLayerSetter<Uri>());
    }

    @OnClick(R.id.imageview_masterpass)
    public void onMasterpassButtonClick() {
        // This is amount of transaction
        Double amount = 133.33;
        // Code generated by transaction. It's unique.
        String cartId = System.currentTimeMillis() + "A";

        Timber.d("Has params, amount -> " + amount + " cartId -> " + cartId);

        warmUp();

        //Url to be called in Custom Tab
        final String masterpassUrl = "https://sandbox.masterpass.com/switchui/index.html?"
                + "allowedCardTypes=master%2Camex%2Cdiners%2Cdiscover%2Cjcb%2Cmaestro%2Cvisa"
                + "&callbackUrl=" + Constants.MASTERPASS_CALLBACK_URL  // Change it to your callback URL
                + "&cartId=" + cartId
                + "&currency=BRL"
                + "&amount=" + amount.toString()
                + "&suppress3Ds=true"
                + "&suppressShippingAddress=true"
                + "&checkoutId=" + Constants.MASTERPASS_CHECKOUTID // Change it to your checkoutID
                + "&checkoutVersion=v6";

        checkSession();
        if (mClient != null) {
            boolean success = mCustomTabsSession.mayLaunchUrl(Uri.parse(masterpassUrl), null, null);
            Timber.d("mayLaunch " + success);
        }

        openMasterpassWallet(initializeCustomTabIntent(mCustomTabsSession), masterpassUrl);
    }

    private void warmUp() {
        boolean success = false;
        if (mClient != null) {
            success = mClient.warmup(0);
        }
        Timber.d("warmup " + success);
    }

    private CustomTabsIntent initializeCustomTabIntent(CustomTabsSession session) {
        CustomTabsIntent.Builder builder = new CustomTabsIntent.Builder(session);
        return builder.build();
    }

    private void openMasterpassWallet(CustomTabsIntent customTabsIntent, String masterpassUrl) {
        Timber.d("Masterpass url ->>> " + masterpassUrl);
        if (mPackageNameToBind == null) {
            Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(masterpassUrl));
            getActivity().startActivity(browserIntent);
        } else {
            customTabsIntent.launchUrl(getActivity(), Uri.parse(masterpassUrl));
        }
    }

    private void checkSession() {
        if (mClient == null) {
            mCustomTabsSession = null;
        } else if (mCustomTabsSession == null) {
            mCustomTabsSession = mClient.newSession(null);
        }
    }

    private void bindCustomTabsService() {
        if (mClient != null) return;
        if (TextUtils.isEmpty(mPackageNameToBind)) {
            mPackageNameToBind = CustomTabsHelper.getPackageNameToUse(getActivity());
            if (mPackageNameToBind == null) return;
        }
        Timber.d("Bind custom tabs service: " + mPackageNameToBind);
        startNewServiceConnection();
    }

    private void startNewServiceConnection() {
        mConnection = new ServiceConnection(this);
        boolean isSuccessful = CustomTabsClient.bindCustomTabsService(getActivity(), mPackageNameToBind, mConnection);
        if (!isSuccessful) {
            mConnection = null;
        }
    }

    private void unbindCustomTabsService() {
        if (mConnection == null) return;
        getActivity().unbindService(mConnection);
        mClient = null;
        mCustomTabsSession = null;
    }

    @Override
    public void onServiceConnected(CustomTabsClient client) {
        mClient = client;
    }

    @Override
    public void onServiceDisconnected() {
        mClient = null;
    }
}
